/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.pixnews.gradle.fbase.options

import com.android.build.api.variant.AndroidComponentsExtension
import com.android.build.api.variant.ApplicationVariant
import com.android.build.api.variant.ResValue
import com.android.build.api.variant.Variant
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.Transformer
import org.gradle.api.plugins.ExtensionContainer
import org.gradle.api.provider.Provider
import ru.pixnews.gradle.fbase.options.FirebaseOptionsExtension.Companion.createFirebaseOptionsExtension
import ru.pixnews.gradle.fbase.options.data.LocalFirebaseOptions
import ru.pixnews.gradle.fbase.options.data.LocalFirebaseOptionsValueSource
import ru.pixnews.gradle.fbase.options.util.withAnyOfAndroidPlugins

class FbaseOptionsGradlePlugin : Plugin<Project> {
    override fun apply(project: Project) {
        project.withAnyOfAndroidPlugins { _, androidComponentsExtension ->
            with(androidComponentsExtension) {
                registerFirebaseOptionsTask(project)
            }
        }
    }

    private fun AndroidComponentsExtension<*, *, *>.registerFirebaseOptionsTask(
        project: Project,
    ) {
        val globalExtension = project.extensions.createFirebaseOptionsExtension()

        onVariants { variant ->
            val applicationIdProvider = if (variant is ApplicationVariant) {
                variant.applicationId
            } else {
                project.providers.provider { "" }
            }
            val firebaseOptionsProvider = globalExtension.source.orElse(
                globalExtension.providers.propertiesFile(applicationIdProvider = applicationIdProvider)
            )

            @Suppress("GENERIC_VARIABLE_WRONG_DECLARATION")
            val firebaseOptionsTaskProvider = project.tasks.register(
                "${variant.name}GenerateFirebaseOptions",
                GenerateFirebaseOptionsTask::class.java,
            ) {
                it.group = "Build"
                it.firebaseConfig.set(firebaseOptionsProvider)
                it.sourceOutputDir.set(project.layout.buildDirectory.dir("firebase-options"))
            }

            variant.sources.java?.addGeneratedSourceDirectory(
                taskProvider = firebaseOptionsTaskProvider,
                wiredWith = GenerateFirebaseOptionsTask::sourceOutputDir,
            )

            addGoogleAppIdResource(variant, firebaseOptionsProvider)
        }
    }

    private fun addGoogleAppIdResource(
        variant: Variant,
        firebaseOptionsProvider: Provider<LocalFirebaseOptions>,
    ) {
        // Manually add google_app_id for Firebase Analytics
        // Cannot use put() here: https://github.com/gradle/gradle/issues/13364
        val googleAppIdKey = variant.makeResValueKey("string", "google_app_id")
        variant.resValues.putAll(
            firebaseOptionsProvider
                .map(ApplicationIdToMapOfValuesTransformer(googleAppIdKey))
                .orElse(emptyMap()),
        )
    }

    internal class ApplicationIdToMapOfValuesTransformer(
        private val googleApiKey: ResValue.Key,
    ) : Transformer<Map<ResValue.Key, ResValue>, LocalFirebaseOptions> {
        override fun transform(options: LocalFirebaseOptions): Map<ResValue.Key, ResValue> {
            return options.applicationId?.let {
                mapOf(googleApiKey to ResValue(it))
            } ?: emptyMap()
        }
    }
}
